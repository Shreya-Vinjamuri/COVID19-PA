---
title: "Center County Daily Data"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.


When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

## Including Plots

You can also embed plots, for example:

```{r Center_County , echo=FALSE}
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(rvest)
install.packages("ggplot2")
library(ggplot2)


#mutate makes a new column
#filter just gives you the data you want
#summarize condenses to one row 
#groupby just groups dataframes even though we don't see it; summarize works per group
#mutate_at(vars(-group_cols()), sum) %>%  #add all numbers per date in a group
#- sign drops what variables you don't want to deal with

tidy_data_long <- function(tib) {
  tib %>% 
    filter(Province_State == "Pennsylvania") %>% 
    filter (Admin2 == "Centre") %>%
    select(-Lat, -Long_,-UID,-iso2, -iso3,-code3,-FIPS,-Province_State,-Country_Region,-Combined_Key) %>% 
    pivot_longer(!Admin2, names_to = "Dates", values_to = "Covid_count") %>% 
    mutate(Dates = as.Date(paste0(Dates, 20), format = "%m/%d/%y") )
}
confirmed_cases <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
COVID_data <- tidy_data_long(confirmed_cases)

COVID_daycount <- COVID_data %>%
  rename (count_n = Covid_count) %>% #the covid counts
  group_by(Admin2) %>%
  mutate (count_n_minus_1 = lag(count_n), count_by_day = count_n - count_n_minus_1) %>%
  ungroup() %>%
  
  select(Admin2, Dates, count_by_day) 
COVID_daycount$count_by_day[is.na(COVID_daycount$count_by_day)] <- 0

if(any(COVID_daycount$count_by_day < 0))  {
  warning("Negative cases detected, clean data.")
}
COVID_daycount$count_by_day[COVID_daycount$count_by_day < 0] <- 0

my_plot<- ggplot(COVID_daycount, aes(x=Dates, y = count_by_day)) + geom_line() + 
  labs(x= "Centre County", y="New Counts Per Day")
my_plot+scale_x_date(date_labels = "%b")
View(my_plot)
install.packages("plotly")
library (plotly)
ggplotly(my_plot)
```



```{r mapped, echo=FALSE}
library(readr)
library(dplyr)
library(tidyr)


tidy_data_long <- function(tib) {
  tib %>% 
    filter(Province_State == "Pennsylvania") %>% 
    select(-Lat, -Long_,-UID,-iso2, -iso3,-code3,-FIPS,-Province_State,-Country_Region,-Combined_Key) %>% 
    pivot_longer(!Admin2, names_to = "Dates", values_to = "Covid_count") %>% 
    mutate(Dates = as.Date(paste0(Dates, 20), format = "%m/%d/%y") )
}
confirmed_cases <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
COVID_data <- tidy_data_long(confirmed_cases)

COVID_daycount <- COVID_data %>%
  rename (count_n = Covid_count) %>% #the covid counts
  group_by(Admin2) %>%
  mutate (count_n_minus_1 = lag(count_n), count_by_day = count_n - count_n_minus_1) %>%
  ungroup()


COVID_daycount$count_by_day[is.na(COVID_daycount$count_by_day)] <- 0

if(any(COVID_daycount$count_by_day < 0))  {
  warning("Negative cases detected, clean data.")
}
COVID_daycount$count_by_day[COVID_daycount$count_by_day < 0] <- 0

COVID_Sum <- COVID_daycount %>%
  group_by(Admin2) %>%
  summarize(Total_cases = sum(count_by_day)) %>%
  ungroup()

COVID_Sum =COVID_Sum[-c(50,61),]
library(sf)
map <- st_read("gadm36_USA.gpkg",layer = "gadm36_USA_2" )
#st_layers("gadm36_USA.gpkg")

penn_map <- map %>% 
  filter(NAME_1 == "Pennsylvania")

colnames(penn_map)[colnames(penn_map) == 'NAME_2'] <- 'Admin2'
 # why does rename(Admin2 = NAME_2) not work
penn_map<- mutate(penn_map, Admin2 = gsub(" ", "", Admin2))
plot(penn_map["Admin2"])
#why does plot(penn_map$NAME_2) not work?

#library(tmap)
Total_Sum_PA<- inner_join(penn_map,COVID_Sum, by= "Admin2")
#tmap_mode(mode = "plot")

#tm_shape(Total_Sum_PA) +
  #tm_polygons(col = "Total_cases", title = "Total Cases", palette = "-RdYlBu")


library(readxl)
Population_Data <- read_excel("Population_Data.xlsx")
colnames(Population_Data) <- Population_Data[1,]
Population_Data = Population_Data[-c(1,2,70,71,72,73,74),]
census_data <- select(Population_Data,"Admin2","2019") %>%
  mutate(Admin2 = gsub(" ","", (gsub("\\.", "", gsub("County, Pennsylvania", "", Admin2) ))))
relative_data <- inner_join(census_data,Total_Sum_PA, "Admin2") %>% 
  rename("Census"='2019' ) %>% 
  select(Admin2, Total_cases, Census ) %>% 
  mutate(relativeCases = (Total_cases/Census * 100000))

library(tmap)
Total_Rel_PA <- inner_join(penn_map,relative_data, by= "Admin2")
tm_shape(Total_Rel_PA) +
  tm_polygons(col = "relativeCases", title = "Cases/100000", palette = "-RdYlBu")

library(mapview)
mapview(Total_Rel_PA, zcol = "relativeCases")



```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
